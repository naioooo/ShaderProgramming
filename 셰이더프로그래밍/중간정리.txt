/////////////////////////////////////////////
Lecture1_0
/////////////////////////////////////////////
렌더링을 위해 필요한 기본적인 요소들에 대해 상기하자

그래픽스 파이프라인에 대해 다시 상기
1. 그래픽스 파이프라인이란?
2. 각 단계에서 수행하는 작업?

GLSL만을 위한 프로젝트

렌더링에 대한 필요한 정보
GPU = 프라이팬
다양한 요리재료들을 후라이팬에 던져놓는 과정
재료들을 다듬고 포장을 제거하고 손질하는 과정

쉽지만 중요한 기본지식
렌더링을 위해 서 기본적으로 필요한 것들이 무엇일까?

1. 점 : 하나의 정점으로 이루어짐 // 점 != 정점
 삼차원 공간상에 정의되는 점
 x,y,z값을 가진다.
2. 선 : 두개의 정점으로 이루어짐
 삼차원 공간상에 정의되는 선
 최소 두개의 점들로 이루어 짐
3. 삼각형 : 세개의 정점으로 이루어짐
 삼차원 공간상에 정의되는 면
 세 개의 점들로 이루어짐

점 : 포인트
선 : 라인
삼각형 : 트라이앵글
정점 : 버텍스
요소 : 프리미티브

오픈지엘 : 오른손 좌표계

정육면체에 필요한 삼각형은? 12개
-- 필요한 정점은? 36개

점 != 정점
작업필요

/////////////////////////////////////////////
Lecture1_1
/////////////////////////////////////////////

그래픽스 파이프라인 
여러단계를 거쳐 진화를 해왔음
고정그래픽스 파이프라인에서 프로그램 가능한 그래픽스 파이프라인으로 변화

시험!!
고정 그래픽스 파이프라

인이란?
1. Vertex Transform
2. Primitive Assembly
3. Rasterization and Interpolation
4. Fragment Operation
5. Frame Buffer

시험!! 각각이 어떤 걸 하는지 알아야한다
1. Vertex Transform
 3D좌표가 2D좌표로 점들이 투영되여야한다 
2. Primitive Assembly
 정점들이 점과 선과 삼각형으로 변환하는 상태
3. Rasterization and Interpolation
 변환된 형태를 2차원 픽셀에 채워넣는 상태
4. Fragment Operation
  고정된 몇가지 광원 효과,
5. Frame Buffer 특정한 프레임으로 2D버퍼를 가져오는것

첫번째 변화
프로그램 가능한 그래픽스 파이프 라인이란?
1. Vertex Transform -> VertexShader
투염매트릭스 적용 + 버텍스 애니메이션,  
4. Fragment Operation -> FragmentShader
고정된 몇가지 광원 효과 -> 다양한 필터링 NPR...

/////////////////////////////////////////////
Lecture2_0
/////////////////////////////////////////////

베이스 프로젝트를 빌드해보아라

오픈지엘 렌더링 구조
5가지 단계의 파이프라인을 가진다
**일종의 스테이트 머신 형태로 동작한다
데이터 -> 이미 결정되어 있음
 데이터설정인 렌더링 시작전 한번만 설정됨
파이프라인은 설정된 데이터를 지속적으로 읽어가며 렌더링 수행
렌더링 도중에 데이터가 바뀌는 것을 허용하지 않음

성능의 극대화하기 위한구조로
 cpu-gpu 병렬화로 구조되어있다
효율적인 렌더링을 위해 고유의 데이터형식을 가짐
 VBO -> Vertex Buffer Object

시험!!
버텍스를 어떻게 준비하고 어떻게 뜯어쓰고 어떻게 해야만 출력되는지

/////////////////////////////////////////////
Lecture2_1
/////////////////////////////////////////////

GPU 이해 형태
VBO -> openGL

오픈지엘 데이터 준비
(-1, 0, 1) 좌표계
CCW FACE 앞면,뒷면

버텍스 = {}
어레이는 어디에 저장되어있을까? -> 메인메모리cpu
위 어레이를 오픈지엘에서 바로사용가능할까? -> 놉

CPU메모리 -방법> GPU메모리
오픈지엘에서의 고유의 형식
- Vertex Buffer Object
 다양한 목적으로 사용하기위한 버퍼 오프젝트
 정점사용을 위한 목적이란 이렇게 칭함

- glBindBuffer 
생성된 VBO를 ID를 사용하여 바인드함
바인드란?
 실제 오픈지엘에서 작업할 대상의 형태와 용도를 구체와 해주는 것
  올리려고 하는데 그 데이터가 array형식의 buffer를 가진다면 
 GL_ARRAY_BUFFER를 사용

- glBufferData
바인드된 VBO에 데이터를 할당

/////////////////////////////////////////////
Lecture2_2
/////////////////////////////////////////////
 
Open GL 데이터 사용

GPU memory -< array형태

일단 BIND
데이터 생성시 이미 바인트 했으나
 중간에 다른 오브젝트가 바인드 되었을 가능성
종류당 하나의 오브젝트만 바인드 허용

glVertexAttribPointer
 데이터를 읽어갈 단위와 크기 및 시작점 설정
인덱스 사이즈 타입

GLDrawArrays 모드 처음 카운트
어떤 프리미티브로 구성할 것인지 선택
버텍스 몇개를 그릴 것인지 입력
이 함수 호출시 즉시GPU가 동작
=> 어떤 방식으로 처음 포인터부터 카운트만큼 그려라 

GLSL베이스 프로젝트로 삼각형을 그려봐라

/////////////////////////////////////////////
Lecture3_0
/////////////////////////////////////////////

OpenGL Shading Language
코드보다 셰이더에 중점둔 강의다

버텍스 쉐이더 
하나의 정단위로 처리되는 것

프레그먼트 쉐이더 == 픽셀쉐이더
하나의 프레그먼트, 픽셀단위로 처리되는 스테이지
 
C언어를 기반으로 함

집합체 사용 연습문제 시험!!
mat4 m = mat4(2.0);       m = [2.0, 0, 0, 0], [0, 2.0, 0, 0], [0, 0, 2.0, 0], [0, 0, 0, 2.0] 
vec4 zVec = m[2];  zVec = [0, 0, 2.0, 0]
float yScale = m[1][1];  yScale = 2.0

Shader 입출력
각 Shader단위로 입력 값과 출력값이 있으며 고유의 입출력값과 
사용자 정의 입출력 값이 있음

vertex 는 파이프라인 외부에서
Fragment 는 파이프라인 내부에서
사용자가 정의한 FS 출력값

사용자가 정의한 vs입력값
Attribute라 칭함 => 여러개의 attrib이 모여 하나의 정점을 입력!
layout 통해 가져올수 있다

/////////////////////////////////////////////
Lecture3_1
/////////////////////////////////////////////

static -> 텍스쳐 메모리에 저장
dynamic -> 지피유 메모리에 저장하지만 cpu에도 저장

셰이더 외부입력
1. 버텍스 셰이더
2. 프리미티브 어셈블리
3. 레스터제이션 , 인터폴레이션
4. 프래그먼트 셰이더
5. 프레임 버퍼

유니폼 선언자 사용
유니폼으로 선언된 변수는 외부에서 입력된 값을 가지고 있으며
셰이더 내부에선 읽기만 가능
셰이더 전반에 걸쳐 읽기가 가능함

uniform float gScale;// 이런식으로 선언 -> 외부에서받아오는값

GLint glGetUniformLocation(); 유니폼을 가져오는 함수
아이디를 리턴한다.
이름이 다르거나 없거나 사용하지않아 삭제된경우 오류가 발생

glUniform{id, 값} 을 통해 아이디값을 이용해 값을 저장할수있다.
 
셰이더 컴파일
0. 셰이더 프로그램 생성
1. 셰이더 오브젝트 생성
2. 오브젝트에 소스 할당 및 컴파일
3. 컴파일 완료 확인
3. 셰이더 프로그램에 어태치
4. 어태치 완료후 링크 수행
링크완료 확인 후 사용준비끝
사용시 아래 함수를 사전에 불러줘야 해당 셰이더 프로그램 동작

실습 
컬러 입력
포지션 입력
변화가 있는 입력

/////////////////////////////////////////////
Lecture3_2
/////////////////////////////////////////////

외부입력
1. vertex입력 -> 정점들을 입력 
2. uniform 입력 -> 전반적으로 사용되는 전역변수선언
둘의 차이 Skinning

Color 입력  -> pervertex입력
Position 입력
변화가 있는 입력

/////////////////////////////////////////////
Lecture3_3
/////////////////////////////////////////////

파티클이펙트란?
텍스쳐 기반의 쿼드로 이루어진 모든것들이 이펙트를 이루는것

1. 파티클VBO배열 -> 재활용
2. 파티클VBO배열 크게 늘려

/////////////////////////////////////////////
Lecture3_4
/////////////////////////////////////////////

움직이는 파티클 애니메이션
glVertexAttribPointer의 인자를 넣는 법 시험!!

가속도

/////////////////////////////////////////////
Lecture3_5
/////////////////////////////////////////////
누적된 위치 
가속도, 속도 ,위치

위치 속도 시작시간 생명
EmitTime => 파티클이 생성되는 시작시간
LifeTime 파티클이 유지되는 시간

VBO에 floatfloat 추가
attrib추가 pointer로 조정
vs 처리코드 추가

시간 : 본인 -> 내가 태어난 날 ----누적---> 지내온 나날들

 /////////////////////////////////////////////
Lecture3_6
/////////////////////////////////////////////

LifeTime 용도
1. 사라지게
2. loop 반복적으로

bool bLoop = true; // 숙제

 /////////////////////////////////////////////
Lecture3_7
/////////////////////////////////////////////
랜덤옵션추가해
그림을 그릴수 있게 만듬

 /////////////////////////////////////////////
Lecture4_0
/////////////////////////////////////////////

중력가속도
외부입력가속도

외부입력 -> 그래픽스 파이프라인(attribute통해넘겨줌)
VS : vertex정보를 가공 -> 좌표 -> gl_Position 화면상의 위치

프래그먼트셰이더

파티클별 랜덤컬러부여

시험문제 응용 빈칸채우기

 /////////////////////////////////////////////
Lecture4_1
/////////////////////////////////////////////

프레그 먼트 셰이더 
외부에서 받아온 값으로 설정하기
버텍스셰이더 값 변화시켜보기
내부가 빈원

/////////////////////////////////////////////
Lecture4_2
/////////////////////////////////////////////

프래그먼트 셰이더를 이용해서
크기가 다른 중심원을 10개를 그려봐라

- sin 함수를 이용해서
sin -> radian
격자무늬 만들기 -> 시험

/////////////////////////////////////////////
Lecture4_3
/////////////////////////////////////////////

원하는 위치에 원을 그려보기
원하는 위치에 여러개의 동심원 그리기
원하는 위치에 움직이는 여러개의 동심원 그리기

점점퍼지다가 라이프타임을 주어서 멈추게 만든다. -> 시험

/////////////////////////////////////////////
Lecture4_4
/////////////////////////////////////////////

레이더망 구현
1. 동심원 ->
이쁘게 만들기 시험
/////////////////////////////////////////////
Lecture4_5
/////////////////////////////////////////////

//포지션과 컬러 순서대로 넣는 방식
// VBO를 2개만들어 각각 바인드 하는 방식	
//한꺼번에 몰아넣는 방식

	int attribPosition = glGetAttribLocation(shader, "a_Position");
	glEnableVertexAttribArray(attribPosition);
	int attribColor = glGetAttribLocation(shader, "a_Color");
	glEnableVertexAttribArray(attribColor);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOSandbox);
	glVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 7, 0);
	glVertexAttribPointer(attribColor, 4, GL_FLOAT, GL_FALSE, sizeof(float) * 7, (GLvoid*)(sizeof(float)*3));
	*/

	
	/*int attribPosition = glGetAttribLocation(shader, "a_Position");
	glEnableVertexAttribArray(attribPosition);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOPack0_Pos);
	glVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);
	
	int attribColor = glGetAttribLocation(shader, "a_Color");
	glEnableVertexAttribArray(attribColor);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOPack0_Color);
	glVertexAttribPointer(attribColor, 4, GL_FLOAT, GL_FALSE, sizeof(float) * 4, 0);*/

	
	int attribPosition = glGetAttribLocation(shader, "a_Position");
	glEnableVertexAttribArray(attribPosition);
	int attribColor = glGetAttribLocation(shader, "a_Color");
	glEnableVertexAttribArray(attribColor);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOPack1);
	glVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);
	glVertexAttribPointer(attribColor, 4, GL_FLOAT, GL_FALSE, sizeof(float) * 4, (GLvoid*)(sizeof(float) * 18));


/////////////////////////////////////////////
Lecture5_0
/////////////////////////////////////////////

버텍스 사용 애니메이션

Lecture5_LineSegment을 이용해
사인곡선주기를 그려라 
1. 버텍스셰이더로
2. 프래그먼트셰이더로

셤범위



포체티노, 콘테, 무리뉴, 팀셔우드

0순위 : 손케
레전드 : 에릭센 모드리치 베일
탑 : 뎀벨레 요리스 베르통언 토비
애정 : 워커 로즈 알리 반더바르트 스콧파커  
정이가는 : 완야마 트리피어 다이어 모우라 윙크스 스킵 벤데이비스 메이슨 호이비
애증 : 라멜라 오리에 시소코 도허티 레길론 산체스
















